<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dengyang</title>
  
  <subtitle>dy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://120224.com/"/>
  <updated>2019-01-01T23:00:42.521Z</updated>
  <id>http://120224.com/</id>
  
  <author>
    <name>Young Teng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站闲置了一年多之后的感想</title>
    <link href="http://120224.com/2018/12/27/the_thought_of_no_manage_web_one_half_year_later/"/>
    <id>http://120224.com/2018/12/27/the_thought_of_no_manage_web_one_half_year_later/</id>
    <published>2018-12-26T23:35:59.000Z</published>
    <updated>2019-01-01T23:00:42.521Z</updated>
    
    <content type="html"><![CDATA[<p>其实我在2017年06/07月份就应经把120224.com这个域名注册了,<br>同时也在同事彭川大神的影响下开始接触hexo+github.io这个静态博客系统.<br>之后也是随意搞搞搞,没有什么大的动作.<br>后来09月23日左右又开始跟着李沐大神学习Gluon深度学习课程,这些东西也就不了了之了.<br>最近是看到别人的博客时,发现别人的博客挺漂亮的就想到了自己的.<br>自己的一直没有经营,还是以前的老theme.因为之前修过了mac-pro,<br>导致自己的博客文件没有备份保存下来,同时又想直接摒弃以前的主题,<br>所以最近就直接又新建了一个新的主题.<br>以后这个博客还是可以多来记录记录自己的技术学习过程和自己的生活点点滴滴的,<br>也是极好的呢.同时自己也有喜欢记录的习惯,就是偶尔总是拖延症附体,<br>所以也都是断断续续不系统的记录.有时候也总是想改掉这个坏毛病,<br>所以这个博客也就成了自己改掉坏习惯的一个”见证人”吧.<br>后面的路还很长,希望自己勿忘初心,砥砺前行,脚踏实地的,<br>千万不要再次好高骛远了.加油!</p><pre><code>邓先森 2018-12-27 08:20 石榴庄</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实我在2017年06/07月份就应经把120224.com这个域名注册了,&lt;br&gt;同时也在同事彭川大神的影响下开始接触hexo+github.io这个静态博客系统.&lt;br&gt;之后也是随意搞搞搞,没有什么大的动作.&lt;br&gt;后来09月23日左右又开始跟着李沐大神学习Gluon深
      
    
    </summary>
    
      <category term="随笔" scheme="http://120224.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感想" scheme="http://120224.com/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>&lt;(￣︶￣)&gt; 网站更新情况记录 &lt;(￣︶￣)&gt;</title>
    <link href="http://120224.com/2017/12/29/the_logs_of_web_update/"/>
    <id>http://120224.com/2017/12/29/the_logs_of_web_update/</id>
    <published>2017-12-28T18:12:01.000Z</published>
    <updated>2018-12-31T17:08:52.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019-01-01"><a href="#2019-01-01" class="headerlink" title="2019-01-01:"></a>2019-01-01:</h1><p>1.添加了收录百度的功能,确保网站后期能被检索到.<br>2.增加了www域名解析,以前120224.com可以访问,而<a href="http://www.120224.com不能访问" target="_blank" rel="noopener">www.120224.com不能访问</a>.</p><h1 id="2018-12-29"><a href="#2018-12-29" class="headerlink" title="2018-12-29:"></a>2018-12-29:</h1><p>1.添加置顶功能.<br>2.增添了日志发表时间,以前版本只到日期.<br>3.添加了吴恩达课程和AstonZhang的友链.<br>4.更改”沐神”为”李沐”,描述”~ 亚马逊 &amp; MXNet &amp; Gluon发起者 ~”改为”~ 亚马逊首席（principal）科学家，美国卡内基梅隆大学计算机系博士。~”.<br>5.更改”~ B站课程 (经典) ~”为”~ B站《动手学深度学习》课程 (经典) ~”.</p><h1 id="2018-12-28"><a href="#2018-12-28" class="headerlink" title="2018-12-28:"></a>2018-12-28:</h1><p>1.将网站与七牛云连结,避免日后写文章添加图片的繁琐.</p><h1 id="2018-12-27"><a href="#2018-12-27" class="headerlink" title="2018-12-27:"></a>2018-12-27:</h1><p>1.添加评论功能,用了韩国的”来必力”.经过测试移动端貌似没有问题,就是pc端可能存在问题,To-do.</p><h1 id="2018-12-26"><a href="#2018-12-26" class="headerlink" title="2018-12-26:"></a>2018-12-26:</h1><p>1.将Next主题更新为Pure主题,重新开始.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019-01-01&quot;&gt;&lt;a href=&quot;#2019-01-01&quot; class=&quot;headerlink&quot; title=&quot;2019-01-01:&quot;&gt;&lt;/a&gt;2019-01-01:&lt;/h1&gt;&lt;p&gt;1.添加了收录百度的功能,确保网站后期能被检索到.&lt;br&gt;2.增加了ww
      
    
    </summary>
    
      <category term="网站更新" scheme="http://120224.com/categories/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0/"/>
    
    
      <category term="hexo" scheme="http://120224.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>kaggle上的房价预测竞赛练习,个人最好成绩达到0.15538</title>
    <link href="http://120224.com/2017/09/24/test-of-kaggle-house-prices-predict/"/>
    <id>http://120224.com/2017/09/24/test-of-kaggle-house-prices-predict/</id>
    <published>2017-09-23T17:25:24.000Z</published>
    <updated>2018-12-30T17:34:37.163Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;未完待续&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Time    : 2018/12/29 3:14 PM</span></span><br><span class="line"><span class="comment"># @Author  : dengyang</span></span><br><span class="line"><span class="comment"># @Email   : youngteng@163.com</span></span><br><span class="line"><span class="comment"># @File    : housePredict.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.获取和读取数据集</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line">import gluonbook as gb</span><br><span class="line">from mxnet import autograd,nd,gluon,init</span><br><span class="line">from mxnet.gluon import data as gdata,loss as gloss,nn</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">'./train.csv'</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">'./test.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下train和test数据的shape,规格大小</span></span><br><span class="line"><span class="built_in">print</span>(train_data.shape)</span><br><span class="line"><span class="built_in">print</span>(test_data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下训练样本前四个样本的前四个特征,后两个特征和标签</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">iloc和loc的区别：</span></span><br><span class="line"><span class="string">    iloc，完全基于位置的索引.</span></span><br><span class="line"><span class="string">    iloc的用法完全和numpy中的数字索引一样，开闭区间的逻辑也和Python是相同的。</span></span><br><span class="line"><span class="string">    要注意的是，如果iloc方括号中直接给定一个数字或者一个slice的话，默认索引的是行。</span></span><br><span class="line"><span class="string">    其中数字的情况会返回一个Series</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    iloc主要使用数字来索引数据，而不能使用字符型的标签来索引数据。</span></span><br><span class="line"><span class="string">    而loc则刚好相反，只能使用字符型标签来索引数据，不能使用数字来</span></span><br><span class="line"><span class="string">    索引数据，不过有特殊情况，当数据框dataframe的行标签或者列标</span></span><br><span class="line"><span class="string">    签为数字，loc就可以来其来索引。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(train_data.iloc[0:4,[0,1,2,3,-3,-2,-1]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有数据的训练和测试数据的79个特征按样本连结</span></span><br><span class="line">all_features = pd.concat((train_data.iloc[:,1:-1],test_data.iloc[:,1:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.预处理数据</span></span><br><span class="line"><span class="comment"># 对连续数值的特征做标准化:假设特征在整个数据集上的均值μ,标准差σ.</span></span><br><span class="line"><span class="comment"># 我们可以将特征中每个值先减去μ,再除以σ得到标准化后的每一个特征值,</span></span><br><span class="line"><span class="comment"># 缺失值替换成该特征的均值.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的含义是:all_features的类型如果不是object类型则将特征的索引(index)传递给numeric_features</span></span><br><span class="line">numeric_features = all_features.dtypes[all_features.dtypes != <span class="string">'object'</span>].index</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">apply:TO-DO</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">all_features[numeric_features] = all_features[numeric_features].apply(lambda x: (x - x.mean()) / (x.std()))</span><br><span class="line"><span class="comment"># 下面代码含义:将all_features中含有NA的值用all_features的均值进行填充.</span></span><br><span class="line">all_features = all_features.fillna(all_features.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将离散数值转换成指示特征.如:特征A里面有两个不同的离散值1和2,那么这一步转换</span></span><br><span class="line"><span class="comment"># 将去掉A特征,并新加两个新特征A_1和A_2,其值为0或1.</span></span><br><span class="line"><span class="comment"># dummy_na=True,将缺失值也当做合法的特征值并为其创建指示特征</span></span><br><span class="line">all_features = pd.get_dummies(all_features,dummy_na=True)</span><br><span class="line"><span class="built_in">print</span>(all_features.shape)</span><br><span class="line"><span class="comment"># 此时将特征从79维增加到331维</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过values属性得到NumPy格式的数据,并转成NDArray方便后继训练</span></span><br><span class="line">n_train = train_data.shape[0]</span><br><span class="line">train_features = nd.array(all_features[:n_train].values)</span><br><span class="line"><span class="comment"># 因为之前将train和test所有的数据都合并成了一个文件,</span></span><br><span class="line"><span class="comment"># 现在通过all_features[:n_train]和all_features[n_train:]将他们分开</span></span><br><span class="line">test_features = nd.array(all_features[n_train:].values)</span><br><span class="line">train_labels = nd.array(train_data.SalePrice.values).reshape((-1,1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.训练模型</span></span><br><span class="line"><span class="comment"># 使用基本线性回归模型和平方损失函数训练模型</span></span><br><span class="line">loss = gloss.L2Loss()</span><br><span class="line"></span><br><span class="line">def get_net():</span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    net.add(nn.Dense(1))</span><br><span class="line">    net.initialize()</span><br><span class="line">    <span class="built_in">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义此次比赛中用来评价模型的对数均方根误差.</span></span><br><span class="line">def log_rmse(net,features,labels):</span><br><span class="line">    <span class="comment"># 将小于1的值设成1,使得取对数时数值更稳定</span></span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    Numpy中clip函数的使用.numpy.clip(a, a_min, a_max, out=None)</span></span><br><span class="line"><span class="string">    其中a是一个数组，后面两个参数分别表示最小和最大值，也就是说clip这个</span></span><br><span class="line"><span class="string">    函数将将数组中的元素限制在a_min, a_max之间，大于a_max的就使得它等</span></span><br><span class="line"><span class="string">    于 a_max，小于a_min,的就使得它等于a_min。</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    clipped_preds = nd.clip(net(features),1,<span class="built_in">float</span>(<span class="string">'inf'</span>))</span><br><span class="line">    rmse = nd.sqrt(2 * loss(clipped_preds.log(),labels.log()).mean())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># asscalar():Convert an array of size 1 to its scalar equivalent.</span></span><br><span class="line">    <span class="comment"># 将大小为1的数组转换为其标量等效值</span></span><br><span class="line">    <span class="built_in">return</span> rmse.asscalar()</span><br><span class="line"></span><br><span class="line">def train(net,train_features,train_labels,test_features,test_labels,</span><br><span class="line">          num_epochs,learning_rate,weight_decay,batch_size):</span><br><span class="line">    train_ls,test_ls = [],[]</span><br><span class="line">    train_iter = gdata.DataLoader(gdata.ArrayDataset(train_features,train_labels),batch_size,shuffle=True)</span><br><span class="line">    <span class="comment"># 使用Adam优化算法</span></span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(),<span class="string">'adam'</span>,&#123;<span class="string">'learning_rate'</span>:learning_rate,<span class="string">'wd'</span>:weight_decay&#125;)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> X,y <span class="keyword">in</span> train_iter:</span><br><span class="line">            with autograd.record():</span><br><span class="line">                l = loss(net(X),y)</span><br><span class="line">            l.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">        train_ls.append(log_rmse(net,train_features,train_labels))</span><br><span class="line">        <span class="keyword">if</span> test_labels is not None:</span><br><span class="line">            test_ls.append(log_rmse(net,test_features,test_labels))</span><br><span class="line">    <span class="built_in">return</span> train_ls,test_ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.K折交叉验证</span></span><br><span class="line">def get_k_fold_data(k,i,X,y):</span><br><span class="line">    <span class="comment"># 返回第i折交叉验证时所需要的训练和验证数据</span></span><br><span class="line">    <span class="comment"># 断言函数,做下判断,如果是false就报错退出</span></span><br><span class="line">    assert k &gt; 1</span><br><span class="line">    <span class="comment"># 均分一下数据</span></span><br><span class="line">    fold_size = X.shape[0] // k</span><br><span class="line">    X_train,y_train = None,None</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment"># slice() 函数实现切片对象，主要用在切片操作函数里的参数传递。</span></span><br><span class="line">        idx = slice(j * fold_size,(j + 1) * fold_size)</span><br><span class="line">        X_part,y_part = X[idx,:],y[idx]</span><br><span class="line">        <span class="keyword">if</span> j == 1:</span><br><span class="line">            X_valid,y_valid = X_part,y_part</span><br><span class="line">        <span class="keyword">elif</span> X_train is None:</span><br><span class="line">            X_train,y_train = X_part,y_part</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train = nd.concat(X_train,X_part,dim=0)</span><br><span class="line">            y_train = nd.concat(y_train,y_part,dim=0)</span><br><span class="line">    <span class="built_in">return</span> X_train,y_train,X_valid,y_valid</span><br><span class="line"></span><br><span class="line"><span class="comment"># K折交叉验证我们训练k次并返回训练和验证的平均误差</span></span><br><span class="line">def k_fold(k,X_train,y_train,num_epochs,learning_rate,weight_decay,batch_size):</span><br><span class="line">    train_l_sum,valid_l_sum = 0,0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        data = get_k_fold_data(k,i,X_train,y_train)</span><br><span class="line">        net = get_net()</span><br><span class="line">        train_ls,valid_ls = train(net,*data,num_epochs,learning_rate,weight_decay,batch_size)</span><br><span class="line">        train_l_sum += train_ls[-1]</span><br><span class="line">        valid_l_sum += valid_ls[-1]</span><br><span class="line">        <span class="keyword">if</span> i == 0:</span><br><span class="line">            <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">            我们先定义作图函数semilogy，其中y轴使用了对数尺度。</span></span><br><span class="line"><span class="string">            def semilogy(x_vals, y_vals, x_label, y_label, x2_vals=None, y2_vals=None,</span></span><br><span class="line"><span class="string">                         legend=None, figsize=(3.5, 2.5)):</span></span><br><span class="line"><span class="string">                gb.set_figsize(figsize)</span></span><br><span class="line"><span class="string">                gb.plt.xlabel(x_label)</span></span><br><span class="line"><span class="string">                gb.plt.ylabel(y_label)</span></span><br><span class="line"><span class="string">                gb.plt.semilogy(x_vals, y_vals)</span></span><br><span class="line"><span class="string">                if x2_vals and y2_vals:</span></span><br><span class="line"><span class="string">                    gb.plt.semilogy(x2_vals, y2_vals, linestyle='</span>:<span class="string">')</span></span><br><span class="line"><span class="string">                    gb.plt.legend(legend)</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span></span><br><span class="line">            gb.semilogy(range(1,num_epochs + 1),train_ls,<span class="string">'epochs'</span>,<span class="string">'rmse'</span>,range(1,num_epochs +1),valid_ls,[<span class="string">'train'</span>,<span class="string">'valid'</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'fold %d,train rmse: %f,valid rmse: %f'</span> % (i,train_ls[-1],valid_ls[-1]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> train_l_sum / k,valid_l_sum / k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.模型选择</span></span><br><span class="line"><span class="comment"># 我们使用一组未经调优的超参数并计算交叉验证误差。你可以改动这些超参数来尽可能减小平均测试误差。</span></span><br><span class="line">k,num_epochs,lr,weight_decay,batch_size = 10,165,5,0,60</span><br><span class="line">train_l,valid_l = k_fold(k,train_features,train_labels,num_epochs,lr,</span><br><span class="line">                         weight_decay,batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%d-fold validation: avg train rmse: %f,avg valid rmse: %f'</span> % (k,train_l,valid_l))</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">有时候你会发现一组参数的训练误差可以达到很低，但是在K折交叉验证上的误差可能反而较高。</span></span><br><span class="line"><span class="string">这种现象很可能是由于过拟合造成的。因此，当训练误差降低时，我们要观察K折交叉验证上的</span></span><br><span class="line"><span class="string">误差是否也相应降低。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.预测并在kaggle提交结果</span></span><br><span class="line">def train_and_pred(train_features,test_features,train_labels,test_data,</span><br><span class="line">                   num_epochs,lr,weight_decay,batch_size):</span><br><span class="line">    net = get_net()</span><br><span class="line">    train_ls,_ = train(net,train_features,train_labels,None,None,</span><br><span class="line">                       num_epochs,lr,weight_decay,batch_size)</span><br><span class="line">    gb.semilogy(range(1,num_epochs + 1),train_ls,<span class="string">'epochs'</span>,<span class="string">'rmse'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'train rmse %f'</span> % train_ls[-1])</span><br><span class="line">    preds = net(test_features).asnumpy()</span><br><span class="line">    test_data[<span class="string">'SalePrice'</span>] = pd.Series(preds.reshape(1,-1)[0])</span><br><span class="line">    submission = pd.concat([test_data[<span class="string">'Id'</span>],test_data[<span class="string">'SalePrice'</span>]],axis=1)</span><br><span class="line">    submission.to_csv(<span class="string">'submission.csv'</span>,index=False)</span><br><span class="line"></span><br><span class="line">train_and_pred(train_features,test_features,train_labels,test_data,</span><br><span class="line">               num_epochs,lr,weight_decay,batch_size)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">上述代码执行完之后会生成一个“submission.csv”文件。</span></span><br><span class="line"><span class="string">这个文件是符合 Kaggle 比赛要求的提交格式的。这时，</span></span><br><span class="line"><span class="string">我们可以在 Kaggle 上把我们预测得出的结果进行提交，</span></span><br><span class="line"><span class="string">并且查看与测试数据集上真实房价（标签）的误差。具体</span></span><br><span class="line"><span class="string">来说有以下几个步骤：你需要登录 Kaggle 网站，访问</span></span><br><span class="line"><span class="string">房价预测比赛网页，并点击右侧“Submit Predictions”</span></span><br><span class="line"><span class="string">或“Late Submission”按钮。然后，点击页面下方</span></span><br><span class="line"><span class="string">“Upload Submission File”图标所在的虚线框选择</span></span><br><span class="line"><span class="string">需要提交的预测结果文件。最后，点击页面最下方的</span></span><br><span class="line"><span class="string">“Make Submission”按钮就可以查看结果了</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><p>参数[10,100,5,0,64]运行结果:</p><p>fold 0,train rmse: 0.166232,valid rmse: 0.144298<br>fold 1,train rmse: 0.166070,valid rmse: 0.144265<br>fold 2,train rmse: 0.166147,valid rmse: 0.144306<br>fold 3,train rmse: 0.166064,valid rmse: 0.144525<br>fold 4,train rmse: 0.165943,valid rmse: 0.144174<br>fold 5,train rmse: 0.166049,valid rmse: 0.144230<br>fold 6,train rmse: 0.166298,valid rmse: 0.144140<br>fold 7,train rmse: 0.166498,valid rmse: 0.144192<br>fold 8,train rmse: 0.165994,valid rmse: 0.144347<br>fold 9,train rmse: 0.165646,valid rmse: 0.143963<br>10-fold validation: avg train rmse: 0.166094,avg valid rmse: 0.144244</p><p>参数[10,150,5,0,64]运行结果:<br>fold 0,train rmse: 0.150604,valid rmse: 0.128320<br>fold 1,train rmse: 0.150390,valid rmse: 0.128391<br>fold 2,train rmse: 0.150571,valid rmse: 0.128409<br>fold 3,train rmse: 0.150316,valid rmse: 0.128166<br>fold 4,train rmse: 0.150575,valid rmse: 0.128311<br>fold 5,train rmse: 0.150286,valid rmse: 0.128477<br>fold 6,train rmse: 0.150312,valid rmse: 0.128338<br>fold 7,train rmse: 0.150612,valid rmse: 0.128469<br>fold 8,train rmse: 0.150454,valid rmse: 0.128422<br>fold 9,train rmse: 0.150375,valid rmse: 0.128145<br>10-fold validation: avg train rmse: 0.150450,avg valid rmse: 0.128345<br>train rmse 0.145164</p><p>参数[10,165,5,0,50]运行结果:<br>fold 0,train rmse: 0.139469,valid rmse: 0.120657<br>fold 1,train rmse: 0.139487,valid rmse: 0.120587<br>fold 2,train rmse: 0.139366,valid rmse: 0.120478<br>fold 3,train rmse: 0.139568,valid rmse: 0.120741<br>fold 4,train rmse: 0.139651,valid rmse: 0.120759<br>fold 5,train rmse: 0.139555,valid rmse: 0.120640<br>fold 6,train rmse: 0.139403,valid rmse: 0.120650<br>fold 7,train rmse: 0.139626,valid rmse: 0.120719<br>fold 8,train rmse: 0.139548,valid rmse: 0.120652<br>fold 9,train rmse: 0.139596,valid rmse: 0.120694<br>10-fold validation: avg train rmse: 0.139527,avg valid rmse: 0.120658<br>train rmse 0.135256</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;未完待续&amp;gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="动手学深度学习" scheme="http://120224.com/categories/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DeepLearning" scheme="http://120224.com/tags/DeepLearning/"/>
    
      <category term="MXNet" scheme="http://120224.com/tags/MXNet/"/>
    
      <category term="Gluon" scheme="http://120224.com/tags/Gluon/"/>
    
  </entry>
  
  <entry>
    <title>只有MXNet能拯救你!</title>
    <link href="http://120224.com/2017/09/23/only-mxnet-can-save-you/"/>
    <id>http://120224.com/2017/09/23/only-mxnet-can-save-you/</id>
    <published>2017-09-23T02:55:13.000Z</published>
    <updated>2019-01-07T09:36:36.802Z</updated>
    
    <content type="html"><![CDATA[<h4 id="发现”新大陆”"><a href="#发现”新大陆”" class="headerlink" title="发现”新大陆”"></a>发现”新大陆”</h4><p>最近有幸拜读了李沐(沐神)和Aston zhang的大作<br>–基于MXNet和Gluon的深度学习教程&lt;动手学深度学习&gt;.<br>此课程简直是良心之作,完全免费面向几乎零基础的deep learner.<br>其实自己自2016年下半年就在自学机器学习/深度学习的内容,<br>到目前来看,最适合我的就是这门课程,言简意赅,概念方面也是层层递进,<br>一点不拖泥带水,而且是亚马逊研究院主任及团队成员亲自授课指导,<br>我真的找不到像他们这么奉献的团队了.</p><p>其实自己水平并不高,愚钝得很,每每在论坛上提问,Aston zhang也是很及时热情的解答,<br>令我有了学下去的动力.真的很是感激.</p><h4 id="坎坷求学路-有大神带”真香”"><a href="#坎坷求学路-有大神带”真香”" class="headerlink" title="坎坷求学路,有大神带”真香”:"></a>坎坷求学路,有大神带”真香”:</h4><p>我2016年年底学过唐宇迪的机器学习/深度学习课程,<br>2017年夏天也看过莫烦的博客,<br>了解过七月在线,亦咨询过小象学院,但觉得都不是很适合我.<br>要么就是皮毛,简浅无味,上升不到高度;要么深邃烧脑,不知所云,全篇PPT都是数学公式,让人望而却步.<br>感觉都是骗人的,圈钱,为了赚钱什么课程都能做出来卖.<br>当时真正开源的又少,大家都在韬光养晦地学习进步;<br>有人分享就少之又少了,大神就更没时间去做这些了,<br>所以说沐神团队能这些真的很伟大的!<br>后来我在找课程无果的情况下,就去了B站,期间学过好多课程:<br>有的断断续续不全面,也有的都是”科普”性质的easy lesson.<br>直到一次偶然的机会(2017-09-11),我遇到了Gluon/MXNet,<br>看了他们的视频觉得遇到了知音,索性就关注了他们,后期在斗鱼知乎上也都有关注的.<br>直到此时,我才决定暂时放弃tensorflow和keras转而拥向MXNet的怀抱.</p><h4 id="学海无涯"><a href="#学海无涯" class="headerlink" title="学海无涯"></a>学海无涯</h4><p>学习总是孤独的,不知自己熬过了多少个寂静/深邃夜晚,<br>放弃了多少简单快乐,又付出了多少宝贵的时间……<br>或许只有等你成功的时候别人才会理解你吧,但在那之前请你坚持,努力,坚持努力.<br>夯实基础也是很必要的,包括数学,英语,NumPy,pandas,Matplotlib,SciPy等等.<br>因为有了扎实的基础,对你后面学习理解意义重大.</p><h4 id="最后结尾"><a href="#最后结尾" class="headerlink" title="最后结尾"></a>最后结尾</h4><p>不求别人理解关注,只求自己心安,对得起自己足矣!<br>So,only mxnet can save you.fighting!</p><ul><li>邓先森 2017.09.23 望京</li></ul><h4 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h4><ul><li><p>《动手学深度学习》，面向中文读者、能运行、可讨论。<br>资源网站: zh.diveintodeeplearning.org<br>现在已经更新为:<a href="http://zh.d2l.ai" target="_blank" rel="noopener">http://zh.d2l.ai</a></p></li><li><p>《动手学深度学习》Bilibili网址:<br><a href="https://space.bilibili.com/209599371" target="_blank" rel="noopener">https://space.bilibili.com/209599371</a></p></li><li><p>《动手学深度学习》Github项目地址:<br><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener">https://github.com/d2l-ai/d2l-zh</a></p></li><li><p>李沐:<br><a href="http://www.cs.cmu.edu/~muli/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~muli/</a></p></li><li><p>Aston zhang:<br><a href="https://www.astonzhang.com" target="_blank" rel="noopener">https://www.astonzhang.com</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;发现”新大陆”&quot;&gt;&lt;a href=&quot;#发现”新大陆”&quot; class=&quot;headerlink&quot; title=&quot;发现”新大陆”&quot;&gt;&lt;/a&gt;发现”新大陆”&lt;/h4&gt;&lt;p&gt;最近有幸拜读了李沐(沐神)和Aston zhang的大作&lt;br&gt;–基于MXNet和Gluon的深度学
      
    
    </summary>
    
      <category term="随笔" scheme="http://120224.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感想" scheme="http://120224.com/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_121_Best_Time_to_Buy_and_Sell_Stock</title>
    <link href="http://120224.com/2017/08/24/leetcode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://120224.com/2017/08/24/leetcode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2017-08-24T05:50:07.000Z</published>
    <updated>2019-01-17T05:58:37.486Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个数组，它的第-i-个元素是一支给定股票第-i-天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。"><a href="#给定一个数组，它的第-i-个元素是一支给定股票第-i-天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。" class="headerlink" title="给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。"></a>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</h4><p>注意你不能在买入股票前卖出股票。</p><p>示例 1:</p><p>输入: [7,1,5,3,6,4]<br>输出: 5<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p><p>示例 2:</p><p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>我们需要找出给定数组中两个数字之间的最大差值（即，最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。</p><p>形式上，对于每组 i 和 j（其中j&gt;i）我们需要找出max(prices[j]−prices[i])。</p><h5 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int maxprofit = 0;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; prices.length - 1;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j = i + 1;j &lt; prices.length;j++)&#123;</span><br><span class="line">                int profit = prices[j] - prices[i];</span><br><span class="line">                <span class="keyword">if</span>(profit &gt; maxprofit)&#123;</span><br><span class="line">                    maxprofit = profit;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：O(n^2)。循环运行n(n−1)/2次。</li><li>空间复杂度：O(1)。只使用了两个变量 —— maxprofit和profit</li></ul><h5 id="方法二：一次遍历"><a href="#方法二：一次遍历" class="headerlink" title="方法二：一次遍历"></a>方法二：一次遍历</h5><p>-todo 分析 @dengyang</p><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int minprice = Integer.MAX_VALUE;</span><br><span class="line">        int maxprofit = 0;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; minprice)&#123;</span><br><span class="line">                minprice = prices[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prices[i] - minprice &gt; maxprofit)&#123;</span><br><span class="line">                maxprofit = prices[i] - minprice;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)。只需要遍历一次。</li><li>空间复杂度：O(1)。只使用了两个变量。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个数组，它的第-i-个元素是一支给定股票第-i-天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。&quot;&gt;&lt;a href=&quot;#给定一个数组，它的第-i-个元素是一支给定股票第-i-天的价格。如果你最多只允许完
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_021_Merge_Two_Sorted_Lists</title>
    <link href="http://120224.com/2017/08/23/leetcode-021-Merge-Two-Sorted-Lists/"/>
    <id>http://120224.com/2017/08/23/leetcode-021-Merge-Two-Sorted-Lists/</id>
    <published>2017-08-23T01:00:04.000Z</published>
    <updated>2019-01-15T01:10:57.717Z</updated>
    
    <content type="html"><![CDATA[<h4 id="将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。"><a href="#将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。" class="headerlink" title="将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。"></a>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</h4><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><h5 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show me the code"></a>show me the code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</span><br><span class="line">        // 类似归并排序中的合并过程</span><br><span class="line">        // 分别创建ListNode类型的 dummyHead 和 cur 待用</span><br><span class="line">        ListNode dummyHead = new ListNode(0);</span><br><span class="line">        ListNode cur = dummyHead;</span><br><span class="line">        // 循环判断:当传入的l1和l2都不是空时进行<span class="keyword">while</span>循环操作</span><br><span class="line">        <span class="keyword">while</span>(l1 != null &amp;&amp; l2 != null)&#123;</span><br><span class="line">        // 比较l1和l2中的元素大小</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">                cur.next = l1;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = l2;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 任意一个为空时,直接连接另一条链条</span><br><span class="line">        <span class="keyword">if</span>(l1 == null)&#123;</span><br><span class="line">            cur.next = l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&quot;&gt;&lt;a href=&quot;#将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_168_Excel_Sheet_Column_Title</title>
    <link href="http://120224.com/2017/08/22/leetcode-168-Excel-Sheet-Column-Title/"/>
    <id>http://120224.com/2017/08/22/leetcode-168-Excel-Sheet-Column-Title/</id>
    <published>2017-08-22T00:01:55.000Z</published>
    <updated>2019-01-15T00:28:17.103Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个正整数，返回它在-Excel-表中相对应的列名称。"><a href="#给定一个正整数，返回它在-Excel-表中相对应的列名称。" class="headerlink" title="给定一个正整数，返回它在 Excel 表中相对应的列名称。"></a>给定一个正整数，返回它在 Excel 表中相对应的列名称。</h4><p>例如，</p><pre><code>1 -&gt; A2 -&gt; B3 -&gt; C...26 -&gt; Z27 -&gt; AA28 -&gt; AB ...</code></pre><p>示例 1:</p><p>输入: 1<br>输出: “A”</p><p>示例 2:</p><p>输入: 28<br>输出: “AB”</p><p>示例 3:</p><p>输入: 701<br>输出: “ZY”</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h4><p>把这个问题想象成是求26进制问题.</p><ul><li>1.拆分成&gt;26(继续做求余求商操作)和&lt;26(直接转成符号)两种情况处理</li><li>2.&gt;26时不停做 while 循环,每次求余的部分即添加到 sb 中,直到将 n 控制在&lt;26时将 n 也添加进 sb 中</li><li>3.最后做反转操作并变成 String</li></ul><h5 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show me the code"></a>show me the code</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String convertToTitle(int n) &#123;</span><br><span class="line">    // 创建整形变量 m 待用</span><br><span class="line">        int m;</span><br><span class="line">        // 创建 StringBuffer 变量待用</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        // <span class="keyword">while</span> 循环,不停地做%26和/26操作</span><br><span class="line">        <span class="keyword">while</span>(n &gt; 26)&#123;</span><br><span class="line">        // 如果n%26==0,说明是含有<span class="string">"Z"</span>的</span><br><span class="line">            <span class="keyword">if</span>(n % 26 == 0)&#123;</span><br><span class="line">            // 此时需要确定<span class="string">"Z"</span>前面是什么,即 n 是什么</span><br><span class="line">                n = n / 26 - 1;</span><br><span class="line">                // 现在 sb 中添加上<span class="string">"Z"</span></span><br><span class="line">                sb.append(<span class="string">'Z'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            // 第二种情况:n 不能被26整除</span><br><span class="line">            // m 为组成部分后面的部分</span><br><span class="line">                m = n % 26;</span><br><span class="line">                // n 为组成部分前面的部分</span><br><span class="line">                n = n / 26;</span><br><span class="line">                // 将 m 添加到 sb 中</span><br><span class="line">                sb.append((char)(m + 64));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 把 n 添加到 sb 中(对所有情况而言)</span><br><span class="line">        sb.append((char)(n + 64));</span><br><span class="line">        // 将 sb 翻转,并转成 String 格式</span><br><span class="line">        <span class="built_in">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个正整数，返回它在-Excel-表中相对应的列名称。&quot;&gt;&lt;a href=&quot;#给定一个正整数，返回它在-Excel-表中相对应的列名称。&quot; class=&quot;headerlink&quot; title=&quot;给定一个正整数，返回它在 Excel 表中相对应的列名称。&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_020_Valid_Parentheses</title>
    <link href="http://120224.com/2017/08/21/leetcode-020-Valid-Parentheses/"/>
    <id>http://120224.com/2017/08/21/leetcode-020-Valid-Parentheses/</id>
    <published>2017-08-20T18:39:16.000Z</published>
    <updated>2019-01-11T19:36:17.543Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。"><a href="#给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。" class="headerlink" title="给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。"></a>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</h4><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><p>输入: “()”<br>输出: true</p><p>示例 2:</p><p>输入: “()[]{}”<br>输出: true</p><p>示例 3:</p><p>输入: “(]”<br>输出: false</p><p>示例 4:</p><p>输入: “([)]”<br>输出: false</p><p>示例 5:</p><p>输入: “{[]}”<br>输出: true</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>算法</p><p>1.初始化栈 S。<br>2.一次处理表达式的每个括号。<br>3.如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的子表达式。<br>4.如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个相同类型的左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。<br>5.如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    private HashMap&lt;Character,Character&gt; mappings;</span><br><span class="line">    </span><br><span class="line">    public <span class="function"><span class="title">Solution</span></span>()&#123;</span><br><span class="line">        this.mappings = new HashMap&lt;Character,Character&gt;();</span><br><span class="line">        this.mappings.put(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">        this.mappings.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line">        this.mappings.put(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean isValid(String s) &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; s.length();i++)&#123;</span><br><span class="line">            char c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(this.mappings.containsKey(c))&#123;</span><br><span class="line">                char topElement = stack.empty() ? <span class="string">'#'</span> : stack.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(topElement != this.mappings.get(c))&#123;</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行O(1)的推入和弹出操作。</li><li>空间复杂度：O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如 ((((((((((。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。&quot;&gt;&lt;a href=&quot;#给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串，判断字符串是否有效。&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_026_Remove_Duplicates_from_Sorted_Array</title>
    <link href="http://120224.com/2017/08/20/leetcode-026-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://120224.com/2017/08/20/leetcode-026-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2017-08-20T02:40:11.000Z</published>
    <updated>2019-01-07T02:49:51.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。"><a href="#给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。" class="headerlink" title="给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。"></a>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</h4><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>示例 1:</p><p>给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2:</p><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><h5 id="方法：双指针法"><a href="#方法：双指针法" class="headerlink" title="方法：双指针法"></a>方法：双指针法</h5><p>算法</p><p>数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。只要 nums[i]=nums[j]，我们就增加 j 以跳过重复项。</p><p>当我们遇到 nums[j] ≠ nums[i] 时，跳过重复项的运行已经结束，因此我们必须把它（nums[j]）的值复制到 nums[i+1]。然后递增 i，接着我们将再次重复相同的过程，直到 j 到达数组的末尾为止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeDuplicates(int[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == 0) <span class="built_in">return</span> 0;</span><br><span class="line">        int i = 0;</span><br><span class="line">        <span class="keyword">for</span> (int j = 1; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] != nums[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> i + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&quot;&gt;&lt;a href=&quot;#给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_014_Longest_Common_Prefix</title>
    <link href="http://120224.com/2017/08/19/leetcode-014-Longest-Common-Prefix/"/>
    <id>http://120224.com/2017/08/19/leetcode-014-Longest-Common-Prefix/</id>
    <published>2017-08-19T01:24:51.000Z</published>
    <updated>2019-01-07T01:48:57.387Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编写一个函数来查找字符串数组中的最长公共前缀。"><a href="#编写一个函数来查找字符串数组中的最长公共前缀。" class="headerlink" title="编写一个函数来查找字符串数组中的最长公共前缀。"></a>编写一个函数来查找字符串数组中的最长公共前缀。</h4><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1:</p><p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”<br>示例 2:</p><p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。<br>说明:</p><p>所有输入只包含小写字母 a-z 。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h4><p>暴力法:</p><ul><li>取出strs中第一个元素的第i个值和第j个元素的第i个值进行比较,相同则添加到sb中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == 0) <span class="built_in">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == 1) <span class="built_in">return</span> strs[0];</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(strs.length &gt; 1)&#123;</span><br><span class="line">            int len = strs[0].length();</span><br><span class="line">            <span class="keyword">for</span>(int i = 0;i &lt; len;i++)&#123;</span><br><span class="line">                char curr = strs[0].charAt(i);</span><br><span class="line">                <span class="keyword">for</span>(int j = 1;j &lt; strs.length;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(strs[j].length() &lt;= i || strs[j].charAt(i) != curr)&#123;</span><br><span class="line">                        <span class="built_in">return</span> sb.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(strs[j].charAt(i) == curr &amp;&amp; j == strs.length - 1)&#123;</span><br><span class="line">                        sb.append(curr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>之后做了小改动,显得更简洁一些,用了substring()方法,但思路类似:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public static String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">        int count = strs.length;</span><br><span class="line">        String prefix = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(count != 0)&#123;</span><br><span class="line">            prefix = strs[0];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i=1; i&lt;count; i++)&#123;</span><br><span class="line">            //关键代码，不断的从后往前截取字符串，然后与之相比，直到startsWith()返回<span class="literal">true</span></span><br><span class="line">            <span class="keyword">while</span>(!strs[i].startsWith(prefix))&#123;</span><br><span class="line">                prefix = prefix.substring(0, prefix.length()-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>采用方法</th><th>分别用时</th></tr></thead><tbody><tr><td>1</td><td>9ms</td></tr><tr><td>2</td><td>13ms</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;编写一个函数来查找字符串数组中的最长公共前缀。&quot;&gt;&lt;a href=&quot;#编写一个函数来查找字符串数组中的最长公共前缀。&quot; class=&quot;headerlink&quot; title=&quot;编写一个函数来查找字符串数组中的最长公共前缀。&quot;&gt;&lt;/a&gt;编写一个函数来查找字符串数组中的最
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_007_Reverse_Integer</title>
    <link href="http://120224.com/2017/08/18/leetcode-007-Reverse-Integer/"/>
    <id>http://120224.com/2017/08/18/leetcode-007-Reverse-Integer/</id>
    <published>2017-08-18T11:32:36.000Z</published>
    <updated>2019-01-07T01:48:06.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转。"><a href="#给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转。" class="headerlink" title="给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。"></a>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</h4><p>示例 1:</p><p>输入: 123<br>输出: 321</p><p>示例 2:</p><p>输入: -123<br>输出: -321</p><p>示例 3:</p><p>输入: 120<br>输出: 21</p><p>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2<strong>31,  2</strong>31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>方法：弹出和推入数字 &amp; 溢出前进行检查</p><p>思路</p><p>我们可以一次构建反转整数的一位数字。在这样做的时候，我们可以预先检查向原整数附加另一位数字是否会导致溢出。</p><p>算法</p><p>反转整数的方法可以与反转字符串进行类比。</p><p>我们想重复“弹出” x 的最后一位数字，并将它“推入”到 rev 的后面。最后，rev 将与 x 相反。</p><p>要在没有辅助堆栈 / 数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//pop operation:</span><br><span class="line">pop = x % 10;</span><br><span class="line">x /= 10;</span><br><span class="line"></span><br><span class="line">//push operation:</span><br><span class="line">temp = rev * 10 + pop;</span><br><span class="line">rev = temp;</span><br></pre></td></tr></table></figure><p>但是，这种方法很危险，因为当 temp = rev⋅10 + pop 时会导致溢出。</p><p>幸运的是，事先检查这个语句是否会导致溢出很容易。</p><p>为了便于解释，我们假设 rev 是正数。</p><ul><li>如果 temp=rev⋅10+pop 导致溢出，那么一定有 rev≥ 10/(INTMAX) 。</li><li>如果 rev&gt; INTMAX / 10 ，那么 temp=rev⋅10+pop 一定会溢出。</li><li>如果 rev== INTMAX / 10，那么只要 pop&gt;7，temp=rev⋅10+pop 就会溢出。<br>当 rev 为负时可以应用类似的逻辑。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int reverse(int x) &#123;</span><br><span class="line">        int rev = 0;</span><br><span class="line">        <span class="keyword">while</span>(x != 0)&#123;</span><br><span class="line">            int pop = x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">            <span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE / 10 || (rev == Integer.MAX_VALUE / 10 &amp;&amp; pop &gt; 7)) <span class="built_in">return</span> 0;</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE / 10 || (rev == Integer.MIN_VALUE / 10 &amp;&amp; pop &lt; -8)) <span class="built_in">return</span> 0;</span><br><span class="line">            rev = rev * 10 + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><ul><li>时间复杂度：O(log(x))，x 中大约有 log10(x) 位数字。</li><li>空间复杂度：O(1)。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转。&quot;&gt;&lt;a href=&quot;#给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转。&quot; class=&quot;headerlink&quot; title=&quot;给出一个 32 位的有符号整数，你需要将
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_013_Roman_to_Integer </title>
    <link href="http://120224.com/2017/08/17/leetcode-013-Roman-to-Integer/"/>
    <id>http://120224.com/2017/08/17/leetcode-013-Roman-to-Integer/</id>
    <published>2017-08-17T10:42:24.000Z</published>
    <updated>2019-01-01T11:10:48.017Z</updated>
    
    <content type="html"><![CDATA[<h4 id="罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。"><a href="#罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。" class="headerlink" title="罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。"></a>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</h4><table><thead><tr><th>字符</th><th>数值</th><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>I</td><td>1</td><td>C</td><td>100</td></tr><tr><td>V</td><td>5</td><td>D</td><td>500</td></tr><tr><td>X</td><td>10</td><td>M</td><td>1000</td></tr><tr><td>L</td><td>50</td></tr></tbody></table><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>示例 1:</p><p>输入: “III”<br>输出: 3<br>示例 2:</p><p>输入: “IV”<br>输出: 4<br>示例 3:</p><p>输入: “IX”<br>输出: 9<br>示例 4:</p><p>输入: “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.<br>示例 5:</p><p>输入: “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>我的思路是这样的:</p><ul><li>先要判断输入的String s是不是非法数据,如果为空或长度为0,则直接return -1;</li><li>接下来设置一个key-value类型的HashMap,将罗马数字和对应的数值put进HashMap中;</li><li>做for循环将输入的s的每个元素中罗马数字对应的数值进行相加,傻瓜式相加,现在不用考虑任何形式的组合形式;</li><li>利用s.contains(“IV”) || s.contains(“IX”), s.contains(“XL”) || s.contains(“XC”), s.contains(“CD” || s.contains(“CM”)做判断,因为只有这六种形式是特殊情况,如若s中含有第一种形式则总结果-2,含有第二种形式则总结果-20,含有第三种形式则总结果-200.</li><li>最后返回return 总结果result.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int romanToInt(String s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == null || s.length() == 0)    <span class="built_in">return</span> -1;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">'I'</span>, 1);</span><br><span class="line">        map.put(<span class="string">'V'</span>, 5);</span><br><span class="line">        map.put(<span class="string">'X'</span>, 10);</span><br><span class="line">        map.put(<span class="string">'L'</span>, 50);</span><br><span class="line">        map.put(<span class="string">'C'</span>, 100);</span><br><span class="line">        map.put(<span class="string">'D'</span>, 500);</span><br><span class="line">        map.put(<span class="string">'M'</span>, 1000);</span><br><span class="line">        </span><br><span class="line">        int len = s.length();</span><br><span class="line">        int result = 0;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">            result += map.get(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.contains(<span class="string">"IV"</span>) || s.contains(<span class="string">"IX"</span>))&#123;</span><br><span class="line">            result -= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.contains(<span class="string">"XL"</span>) || s.contains(<span class="string">"XC"</span>))&#123;</span><br><span class="line">            result -= 20;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.contains(<span class="string">"CD"</span>) || s.contains(<span class="string">"CM"</span>))&#123;</span><br><span class="line">            result -= 200;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="结果总结"><a href="#结果总结" class="headerlink" title="结果总结"></a>结果总结</h5><p>但是提交结果不是很好,耗时需要112ms,又尝试了一下全用if语句和switch语句的形式,发现效果都要好于这个情况.所以还需寻找最优的算法解决.</p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>todo</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。&quot;&gt;&lt;a href=&quot;#罗马数字包含以下七种字符-I，-V，-X，-L，C，D-和-M。&quot; class=&quot;headerlink&quot; title=&quot;罗马数字包含以下七种字符: I， V， X， L，C，D
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_009_Palindrome_Number</title>
    <link href="http://120224.com/2017/08/16/leetcode-009-Palindrome-Number/"/>
    <id>http://120224.com/2017/08/16/leetcode-009-Palindrome-Number/</id>
    <published>2017-08-16T05:03:25.000Z</published>
    <updated>2019-01-07T01:48:18.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。"><a href="#判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。" class="headerlink" title="判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。"></a>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</h4><p>示例 1:</p><p>输入: 121<br>输出: true<br>示例 2:</p><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3:</p><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p><h5 id="方法：反转一半数字"><a href="#方法：反转一半数字" class="headerlink" title="方法：反转一半数字"></a>方法：反转一半数字</h5><ul><li>思路</li></ul><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p><p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于int.MAX，我们将遇到整数溢出问题。</p><p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p><p>例如，输入 1221，我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较，因为二者相同，我们得知数字 1221 是回文。</p><p>让我们看看如何将这个想法转化为一个算法。</p><ul><li>算法</li></ul><p>首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。</p><p>现在，让我们来考虑如何反转后半部分的数字。 对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以10的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。 如果继续这个过程，我们将得到更多位数的反转数字。</p><p>现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？</p><p>我们将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于反转后的数字时，就意味着我们已经处理了一半位数的数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isPalindrome(int x) &#123;</span><br><span class="line">        // 1.根据题意大意可知,当x小于零时是非回文数</span><br><span class="line">        // 2.当x不等于零时且个位为0也是非回文数</span><br><span class="line">        <span class="keyword">if</span>(x&lt;0 || (x % 10 == 0 &amp;&amp; x != 0))&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        int halfX = 0;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; halfX)&#123;</span><br><span class="line">            halfX = halfX * 10 + x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> x == halfX || x == halfX / 10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析</p><ul><li>时间复杂度：O(log10(n))，对于每次迭代，我们会将输入除以10，因此时间复杂度为O(log10(n))。</li><li>空间复杂度：O(1)。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&quot;&gt;&lt;a href=&quot;#判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&quot; class=&quot;headerlink&quot; title=&quot;判断一个
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_001_Two_Sum</title>
    <link href="http://120224.com/2017/08/15/leetcode-001-Two-Sum/"/>
    <id>http://120224.com/2017/08/15/leetcode-001-Two-Sum/</id>
    <published>2017-08-15T02:13:48.000Z</published>
    <updated>2019-01-07T01:47:51.964Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。"><a href="#给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。" class="headerlink" title="给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。"></a>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</h4><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h4><h5 id="方法一-暴力法"><a href="#方法一-暴力法" class="headerlink" title="方法一:暴力法"></a>方法一:暴力法</h5><p>暴力法很简单.遍历每个元素x,并查找是否存在一个值与target - x相等的目标元素.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j = i + 1;j &lt; nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] == target - nums[i])&#123;</span><br><span class="line">                    <span class="built_in">return</span> new int[] &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析:</p><ul><li>时间复杂度:O(n2),对于每个元素,我们都试图通过遍历数组的其余部分来寻找它所对应的目标元素,这将耗费O(n)的时间.因此时间复杂度为O(n2)</li><li>空间复杂度:O(1)</li></ul><h5 id="方法二-两遍哈希表"><a href="#方法二-两遍哈希表" class="headerlink" title="方法二:两遍哈希表"></a>方法二:两遍哈希表</h5><p>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。</p><p>通过以空间换取速度的方式，我们可以将查找时间从O(n)降低到O(1)。哈希表正是为此目的而构建的，它支持以 近似 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。</p><p>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target−nums[i]）是否存在于表中。注意，该目标元素不能是nums[i]本身！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            int temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp) &amp;&amp; map.get(temp) != i)&#123;</span><br><span class="line">                <span class="built_in">return</span> new int[] &#123;i,map.get(temp)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析：</p><ul><li>时间复杂度：<br>O(n)， 我们把包含有n个元素的列表遍历两次。由于哈希表将查找时间缩短到O(1)，所以时间复杂度为O(n)。</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了n个元素。 </li></ul><h5 id="方法三：一遍哈希表"><a href="#方法三：一遍哈希表" class="headerlink" title="方法三：一遍哈希表"></a>方法三：一遍哈希表</h5><p>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            int temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                <span class="built_in">return</span> new int[] &#123;map.get(temp),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析：</p><ul><li>时间复杂度：O(n)， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费O(1)的时间。</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。</li></ul><table><thead><tr><th>采用方法</th><th>分别用时</th></tr></thead><tbody><tr><td>1</td><td>44ms</td></tr><tr><td>2</td><td>11ms</td></tr><tr><td>3</td><td>4ms</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。&quot;&gt;&lt;a href=&quot;#给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://120224.com/2017/06/22/hello-world/"/>
    <id>http://120224.com/2017/06/22/hello-world/</id>
    <published>2017-06-22T05:14:25.000Z</published>
    <updated>2018-12-28T18:18:27.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="技术" scheme="http://120224.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://120224.com/tags/hexo/"/>
    
  </entry>
  
</feed>
