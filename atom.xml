<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dengyang</title>
  
  <subtitle>dy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://120224.com/"/>
  <updated>2018-12-28T18:18:45.834Z</updated>
  <id>http://120224.com/</id>
  
  <author>
    <name>Young Teng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站闲置了一年多之后的感想</title>
    <link href="http://120224.com/2018/12/27/the_thought_of_no_manage_web_one_half_year_later/"/>
    <id>http://120224.com/2018/12/27/the_thought_of_no_manage_web_one_half_year_later/</id>
    <published>2018-12-26T23:35:59.000Z</published>
    <updated>2018-12-28T18:18:45.834Z</updated>
    
    <content type="html"><![CDATA[<p>其实我在2017年06/07月份就应经把120224.com这个域名注册了,<br>同时也在同事彭川大神的影响下开始接触hexo+github.io这个静态博客系统.<br>之后也是随意搞搞搞,没有什么大的动作.<br>后来09月23日左右又开始跟着李沐大神学习Gluon深度学习课程,这些东西也就不了了之了.<br>最近是看到别人的博客时,发现别人的博客挺漂亮的就想到了自己的.<br>自己的一直没有经营,还是以前的老theme.因为之前修过了mac-pro,<br>导致自己的博客文件没有备份保存下来,同时又想直接摒弃以前的主题,<br>所以最近就直接又新建了一个新的主题.<br>以后这个博客还是可以多来记录记录自己的技术学习过程和自己的生活点点滴滴的,<br>也是极好的呢.同时自己也有喜欢记录的习惯,就是偶尔总是拖延症附体,<br>所以也都是断断续续不系统的记录.有时候也总是想改掉这个坏毛病,<br>所以这个博客也就成了自己改掉坏习惯的一个”见证人”吧.<br>后面的路还很长,希望自己勿忘初心,砥砺前行,脚踏实地的,<br>千万不要再次好高骛远了.加油!<br>    邓先森 2018-12-27 08:20 石榴庄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实我在2017年06/07月份就应经把120224.com这个域名注册了,&lt;br&gt;同时也在同事彭川大神的影响下开始接触hexo+github.io这个静态博客系统.&lt;br&gt;之后也是随意搞搞搞,没有什么大的动作.&lt;br&gt;后来09月23日左右又开始跟着李沐大神学习Gluon深
      
    
    </summary>
    
      <category term="随笔" scheme="http://120224.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="感想" scheme="http://120224.com/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>&lt;(￣︶￣)&gt; 网站更新情况记录 &lt;(￣︶￣)&gt;</title>
    <link href="http://120224.com/2017/12/29/the_logs_of_web_update/"/>
    <id>http://120224.com/2017/12/29/the_logs_of_web_update/</id>
    <published>2017-12-28T18:12:01.000Z</published>
    <updated>2018-12-28T19:40:45.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-12-29"><a href="#2018-12-29" class="headerlink" title="2018-12-29:"></a>2018-12-29:</h1><p>1.添加置顶功能.<br>2.增添了日志发表时间,以前版本只到日期.<br>3.添加了吴恩达课程和AstonZhang的友链.<br>4.更改”沐神”为”李沐”,描述”~ 亚马逊 &amp; MXNet &amp; Gluon发起者 ~”改为”~ 亚马逊首席（principal）科学家，美国卡内基梅隆大学计算机系博士。~”.<br>5.更改”~ B站课程 (经典) ~”为”~ B站《动手学深度学习》课程 (经典) ~”.</p><h1 id="2018-12-28"><a href="#2018-12-28" class="headerlink" title="2018-12-28:"></a>2018-12-28:</h1><p>1.将网站与七牛云连结,避免日后写文章添加图片的繁琐.</p><h1 id="2018-12-27"><a href="#2018-12-27" class="headerlink" title="2018-12-27:"></a>2018-12-27:</h1><p>1.添加评论功能,用了韩国的”来必力”.经过测试移动端貌似没有问题,就是pc端可能存在问题,To-do.</p><h1 id="2018-12-26"><a href="#2018-12-26" class="headerlink" title="2018-12-26:"></a>2018-12-26:</h1><p>1.将Next主题更新为Pure主题,重新开始.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018-12-29&quot;&gt;&lt;a href=&quot;#2018-12-29&quot; class=&quot;headerlink&quot; title=&quot;2018-12-29:&quot;&gt;&lt;/a&gt;2018-12-29:&lt;/h1&gt;&lt;p&gt;1.添加置顶功能.&lt;br&gt;2.增添了日志发表时间,以前版本只到日期.&lt;b
      
    
    </summary>
    
      <category term="网站更新" scheme="http://120224.com/categories/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0/"/>
    
    
      <category term="hexo" scheme="http://120224.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>kaggle上的房价预测竞赛练习,个人最好成绩达到0.15538</title>
    <link href="http://120224.com/2017/09/24/test-of-kaggle-house-prices-predict/"/>
    <id>http://120224.com/2017/09/24/test-of-kaggle-house-prices-predict/</id>
    <published>2017-09-23T17:25:24.000Z</published>
    <updated>2018-12-30T17:34:37.163Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;未完待续&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Time    : 2018/12/29 3:14 PM</span></span><br><span class="line"><span class="comment"># @Author  : dengyang</span></span><br><span class="line"><span class="comment"># @Email   : youngteng@163.com</span></span><br><span class="line"><span class="comment"># @File    : housePredict.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.获取和读取数据集</span></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line">import gluonbook as gb</span><br><span class="line">from mxnet import autograd,nd,gluon,init</span><br><span class="line">from mxnet.gluon import data as gdata,loss as gloss,nn</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">'./train.csv'</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">'./test.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下train和test数据的shape,规格大小</span></span><br><span class="line"><span class="built_in">print</span>(train_data.shape)</span><br><span class="line"><span class="built_in">print</span>(test_data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下训练样本前四个样本的前四个特征,后两个特征和标签</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">iloc和loc的区别：</span></span><br><span class="line"><span class="string">    iloc，完全基于位置的索引.</span></span><br><span class="line"><span class="string">    iloc的用法完全和numpy中的数字索引一样，开闭区间的逻辑也和Python是相同的。</span></span><br><span class="line"><span class="string">    要注意的是，如果iloc方括号中直接给定一个数字或者一个slice的话，默认索引的是行。</span></span><br><span class="line"><span class="string">    其中数字的情况会返回一个Series</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    iloc主要使用数字来索引数据，而不能使用字符型的标签来索引数据。</span></span><br><span class="line"><span class="string">    而loc则刚好相反，只能使用字符型标签来索引数据，不能使用数字来</span></span><br><span class="line"><span class="string">    索引数据，不过有特殊情况，当数据框dataframe的行标签或者列标</span></span><br><span class="line"><span class="string">    签为数字，loc就可以来其来索引。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(train_data.iloc[0:4,[0,1,2,3,-3,-2,-1]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有数据的训练和测试数据的79个特征按样本连结</span></span><br><span class="line">all_features = pd.concat((train_data.iloc[:,1:-1],test_data.iloc[:,1:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.预处理数据</span></span><br><span class="line"><span class="comment"># 对连续数值的特征做标准化:假设特征在整个数据集上的均值μ,标准差σ.</span></span><br><span class="line"><span class="comment"># 我们可以将特征中每个值先减去μ,再除以σ得到标准化后的每一个特征值,</span></span><br><span class="line"><span class="comment"># 缺失值替换成该特征的均值.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的含义是:all_features的类型如果不是object类型则将特征的索引(index)传递给numeric_features</span></span><br><span class="line">numeric_features = all_features.dtypes[all_features.dtypes != <span class="string">'object'</span>].index</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">apply:TO-DO</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">all_features[numeric_features] = all_features[numeric_features].apply(lambda x: (x - x.mean()) / (x.std()))</span><br><span class="line"><span class="comment"># 下面代码含义:将all_features中含有NA的值用all_features的均值进行填充.</span></span><br><span class="line">all_features = all_features.fillna(all_features.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将离散数值转换成指示特征.如:特征A里面有两个不同的离散值1和2,那么这一步转换</span></span><br><span class="line"><span class="comment"># 将去掉A特征,并新加两个新特征A_1和A_2,其值为0或1.</span></span><br><span class="line"><span class="comment"># dummy_na=True,将缺失值也当做合法的特征值并为其创建指示特征</span></span><br><span class="line">all_features = pd.get_dummies(all_features,dummy_na=True)</span><br><span class="line"><span class="built_in">print</span>(all_features.shape)</span><br><span class="line"><span class="comment"># 此时将特征从79维增加到331维</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过values属性得到NumPy格式的数据,并转成NDArray方便后继训练</span></span><br><span class="line">n_train = train_data.shape[0]</span><br><span class="line">train_features = nd.array(all_features[:n_train].values)</span><br><span class="line"><span class="comment"># 因为之前将train和test所有的数据都合并成了一个文件,</span></span><br><span class="line"><span class="comment"># 现在通过all_features[:n_train]和all_features[n_train:]将他们分开</span></span><br><span class="line">test_features = nd.array(all_features[n_train:].values)</span><br><span class="line">train_labels = nd.array(train_data.SalePrice.values).reshape((-1,1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.训练模型</span></span><br><span class="line"><span class="comment"># 使用基本线性回归模型和平方损失函数训练模型</span></span><br><span class="line">loss = gloss.L2Loss()</span><br><span class="line"></span><br><span class="line">def get_net():</span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    net.add(nn.Dense(1))</span><br><span class="line">    net.initialize()</span><br><span class="line">    <span class="built_in">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义此次比赛中用来评价模型的对数均方根误差.</span></span><br><span class="line">def log_rmse(net,features,labels):</span><br><span class="line">    <span class="comment"># 将小于1的值设成1,使得取对数时数值更稳定</span></span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    Numpy中clip函数的使用.numpy.clip(a, a_min, a_max, out=None)</span></span><br><span class="line"><span class="string">    其中a是一个数组，后面两个参数分别表示最小和最大值，也就是说clip这个</span></span><br><span class="line"><span class="string">    函数将将数组中的元素限制在a_min, a_max之间，大于a_max的就使得它等</span></span><br><span class="line"><span class="string">    于 a_max，小于a_min,的就使得它等于a_min。</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    clipped_preds = nd.clip(net(features),1,<span class="built_in">float</span>(<span class="string">'inf'</span>))</span><br><span class="line">    rmse = nd.sqrt(2 * loss(clipped_preds.log(),labels.log()).mean())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># asscalar():Convert an array of size 1 to its scalar equivalent.</span></span><br><span class="line">    <span class="comment"># 将大小为1的数组转换为其标量等效值</span></span><br><span class="line">    <span class="built_in">return</span> rmse.asscalar()</span><br><span class="line"></span><br><span class="line">def train(net,train_features,train_labels,test_features,test_labels,</span><br><span class="line">          num_epochs,learning_rate,weight_decay,batch_size):</span><br><span class="line">    train_ls,test_ls = [],[]</span><br><span class="line">    train_iter = gdata.DataLoader(gdata.ArrayDataset(train_features,train_labels),batch_size,shuffle=True)</span><br><span class="line">    <span class="comment"># 使用Adam优化算法</span></span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(),<span class="string">'adam'</span>,&#123;<span class="string">'learning_rate'</span>:learning_rate,<span class="string">'wd'</span>:weight_decay&#125;)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> X,y <span class="keyword">in</span> train_iter:</span><br><span class="line">            with autograd.record():</span><br><span class="line">                l = loss(net(X),y)</span><br><span class="line">            l.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">        train_ls.append(log_rmse(net,train_features,train_labels))</span><br><span class="line">        <span class="keyword">if</span> test_labels is not None:</span><br><span class="line">            test_ls.append(log_rmse(net,test_features,test_labels))</span><br><span class="line">    <span class="built_in">return</span> train_ls,test_ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.K折交叉验证</span></span><br><span class="line">def get_k_fold_data(k,i,X,y):</span><br><span class="line">    <span class="comment"># 返回第i折交叉验证时所需要的训练和验证数据</span></span><br><span class="line">    <span class="comment"># 断言函数,做下判断,如果是false就报错退出</span></span><br><span class="line">    assert k &gt; 1</span><br><span class="line">    <span class="comment"># 均分一下数据</span></span><br><span class="line">    fold_size = X.shape[0] // k</span><br><span class="line">    X_train,y_train = None,None</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment"># slice() 函数实现切片对象，主要用在切片操作函数里的参数传递。</span></span><br><span class="line">        idx = slice(j * fold_size,(j + 1) * fold_size)</span><br><span class="line">        X_part,y_part = X[idx,:],y[idx]</span><br><span class="line">        <span class="keyword">if</span> j == 1:</span><br><span class="line">            X_valid,y_valid = X_part,y_part</span><br><span class="line">        <span class="keyword">elif</span> X_train is None:</span><br><span class="line">            X_train,y_train = X_part,y_part</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train = nd.concat(X_train,X_part,dim=0)</span><br><span class="line">            y_train = nd.concat(y_train,y_part,dim=0)</span><br><span class="line">    <span class="built_in">return</span> X_train,y_train,X_valid,y_valid</span><br><span class="line"></span><br><span class="line"><span class="comment"># K折交叉验证我们训练k次并返回训练和验证的平均误差</span></span><br><span class="line">def k_fold(k,X_train,y_train,num_epochs,learning_rate,weight_decay,batch_size):</span><br><span class="line">    train_l_sum,valid_l_sum = 0,0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        data = get_k_fold_data(k,i,X_train,y_train)</span><br><span class="line">        net = get_net()</span><br><span class="line">        train_ls,valid_ls = train(net,*data,num_epochs,learning_rate,weight_decay,batch_size)</span><br><span class="line">        train_l_sum += train_ls[-1]</span><br><span class="line">        valid_l_sum += valid_ls[-1]</span><br><span class="line">        <span class="keyword">if</span> i == 0:</span><br><span class="line">            <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">            我们先定义作图函数semilogy，其中y轴使用了对数尺度。</span></span><br><span class="line"><span class="string">            def semilogy(x_vals, y_vals, x_label, y_label, x2_vals=None, y2_vals=None,</span></span><br><span class="line"><span class="string">                         legend=None, figsize=(3.5, 2.5)):</span></span><br><span class="line"><span class="string">                gb.set_figsize(figsize)</span></span><br><span class="line"><span class="string">                gb.plt.xlabel(x_label)</span></span><br><span class="line"><span class="string">                gb.plt.ylabel(y_label)</span></span><br><span class="line"><span class="string">                gb.plt.semilogy(x_vals, y_vals)</span></span><br><span class="line"><span class="string">                if x2_vals and y2_vals:</span></span><br><span class="line"><span class="string">                    gb.plt.semilogy(x2_vals, y2_vals, linestyle='</span>:<span class="string">')</span></span><br><span class="line"><span class="string">                    gb.plt.legend(legend)</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span></span><br><span class="line">            gb.semilogy(range(1,num_epochs + 1),train_ls,<span class="string">'epochs'</span>,<span class="string">'rmse'</span>,range(1,num_epochs +1),valid_ls,[<span class="string">'train'</span>,<span class="string">'valid'</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'fold %d,train rmse: %f,valid rmse: %f'</span> % (i,train_ls[-1],valid_ls[-1]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> train_l_sum / k,valid_l_sum / k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.模型选择</span></span><br><span class="line"><span class="comment"># 我们使用一组未经调优的超参数并计算交叉验证误差。你可以改动这些超参数来尽可能减小平均测试误差。</span></span><br><span class="line">k,num_epochs,lr,weight_decay,batch_size = 10,165,5,0,60</span><br><span class="line">train_l,valid_l = k_fold(k,train_features,train_labels,num_epochs,lr,</span><br><span class="line">                         weight_decay,batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%d-fold validation: avg train rmse: %f,avg valid rmse: %f'</span> % (k,train_l,valid_l))</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">有时候你会发现一组参数的训练误差可以达到很低，但是在K折交叉验证上的误差可能反而较高。</span></span><br><span class="line"><span class="string">这种现象很可能是由于过拟合造成的。因此，当训练误差降低时，我们要观察K折交叉验证上的</span></span><br><span class="line"><span class="string">误差是否也相应降低。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.预测并在kaggle提交结果</span></span><br><span class="line">def train_and_pred(train_features,test_features,train_labels,test_data,</span><br><span class="line">                   num_epochs,lr,weight_decay,batch_size):</span><br><span class="line">    net = get_net()</span><br><span class="line">    train_ls,_ = train(net,train_features,train_labels,None,None,</span><br><span class="line">                       num_epochs,lr,weight_decay,batch_size)</span><br><span class="line">    gb.semilogy(range(1,num_epochs + 1),train_ls,<span class="string">'epochs'</span>,<span class="string">'rmse'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'train rmse %f'</span> % train_ls[-1])</span><br><span class="line">    preds = net(test_features).asnumpy()</span><br><span class="line">    test_data[<span class="string">'SalePrice'</span>] = pd.Series(preds.reshape(1,-1)[0])</span><br><span class="line">    submission = pd.concat([test_data[<span class="string">'Id'</span>],test_data[<span class="string">'SalePrice'</span>]],axis=1)</span><br><span class="line">    submission.to_csv(<span class="string">'submission.csv'</span>,index=False)</span><br><span class="line"></span><br><span class="line">train_and_pred(train_features,test_features,train_labels,test_data,</span><br><span class="line">               num_epochs,lr,weight_decay,batch_size)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">上述代码执行完之后会生成一个“submission.csv”文件。</span></span><br><span class="line"><span class="string">这个文件是符合 Kaggle 比赛要求的提交格式的。这时，</span></span><br><span class="line"><span class="string">我们可以在 Kaggle 上把我们预测得出的结果进行提交，</span></span><br><span class="line"><span class="string">并且查看与测试数据集上真实房价（标签）的误差。具体</span></span><br><span class="line"><span class="string">来说有以下几个步骤：你需要登录 Kaggle 网站，访问</span></span><br><span class="line"><span class="string">房价预测比赛网页，并点击右侧“Submit Predictions”</span></span><br><span class="line"><span class="string">或“Late Submission”按钮。然后，点击页面下方</span></span><br><span class="line"><span class="string">“Upload Submission File”图标所在的虚线框选择</span></span><br><span class="line"><span class="string">需要提交的预测结果文件。最后，点击页面最下方的</span></span><br><span class="line"><span class="string">“Make Submission”按钮就可以查看结果了</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><p>参数[10,100,5,0,64]运行结果:</p><p>fold 0,train rmse: 0.166232,valid rmse: 0.144298<br>fold 1,train rmse: 0.166070,valid rmse: 0.144265<br>fold 2,train rmse: 0.166147,valid rmse: 0.144306<br>fold 3,train rmse: 0.166064,valid rmse: 0.144525<br>fold 4,train rmse: 0.165943,valid rmse: 0.144174<br>fold 5,train rmse: 0.166049,valid rmse: 0.144230<br>fold 6,train rmse: 0.166298,valid rmse: 0.144140<br>fold 7,train rmse: 0.166498,valid rmse: 0.144192<br>fold 8,train rmse: 0.165994,valid rmse: 0.144347<br>fold 9,train rmse: 0.165646,valid rmse: 0.143963<br>10-fold validation: avg train rmse: 0.166094,avg valid rmse: 0.144244</p><p>参数[10,150,5,0,64]运行结果:<br>fold 0,train rmse: 0.150604,valid rmse: 0.128320<br>fold 1,train rmse: 0.150390,valid rmse: 0.128391<br>fold 2,train rmse: 0.150571,valid rmse: 0.128409<br>fold 3,train rmse: 0.150316,valid rmse: 0.128166<br>fold 4,train rmse: 0.150575,valid rmse: 0.128311<br>fold 5,train rmse: 0.150286,valid rmse: 0.128477<br>fold 6,train rmse: 0.150312,valid rmse: 0.128338<br>fold 7,train rmse: 0.150612,valid rmse: 0.128469<br>fold 8,train rmse: 0.150454,valid rmse: 0.128422<br>fold 9,train rmse: 0.150375,valid rmse: 0.128145<br>10-fold validation: avg train rmse: 0.150450,avg valid rmse: 0.128345<br>train rmse 0.145164</p><p>参数[10,165,5,0,50]运行结果:<br>fold 0,train rmse: 0.139469,valid rmse: 0.120657<br>fold 1,train rmse: 0.139487,valid rmse: 0.120587<br>fold 2,train rmse: 0.139366,valid rmse: 0.120478<br>fold 3,train rmse: 0.139568,valid rmse: 0.120741<br>fold 4,train rmse: 0.139651,valid rmse: 0.120759<br>fold 5,train rmse: 0.139555,valid rmse: 0.120640<br>fold 6,train rmse: 0.139403,valid rmse: 0.120650<br>fold 7,train rmse: 0.139626,valid rmse: 0.120719<br>fold 8,train rmse: 0.139548,valid rmse: 0.120652<br>fold 9,train rmse: 0.139596,valid rmse: 0.120694<br>10-fold validation: avg train rmse: 0.139527,avg valid rmse: 0.120658<br>train rmse 0.135256</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;未完待续&amp;gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="动手学深度学习" scheme="http://120224.com/categories/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DeepLearning" scheme="http://120224.com/tags/DeepLearning/"/>
    
      <category term="MXNet" scheme="http://120224.com/tags/MXNet/"/>
    
      <category term="Gluon" scheme="http://120224.com/tags/Gluon/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_01_twosum</title>
    <link href="http://120224.com/2017/08/15/leetcode-01-twosum/"/>
    <id>http://120224.com/2017/08/15/leetcode-01-twosum/</id>
    <published>2017-08-15T02:13:48.000Z</published>
    <updated>2018-12-31T05:43:40.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。"><a href="#给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。" class="headerlink" title="给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。"></a>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</h4><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><p>####解题思路:</p><p>#####方法一:暴力法<br>暴力法很简单.遍历每个元素x,并查找是否存在一个值与target - x相等的目标元素.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j = i + 1;j &lt; nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] == target - nums[i])&#123;</span><br><span class="line">                    <span class="built_in">return</span> new int[] &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析:</p><ul><li>时间复杂度:O(n2),对于每个元素,我们都试图通过遍历数组的其余部分来寻找它所对应的目标元素,这将耗费O(n)的时间.因此时间复杂度为O(n2)</li><li>空间复杂度:O(1)<br>#####方法二:两遍哈希表<br>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。</li></ul><p>通过以空间换取速度的方式，我们可以将查找时间从O(n)降低到O(1)。哈希表正是为此目的而构建的，它支持以 近似 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。</p><p>一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target−nums[i]）是否存在于表中。注意，该目标元素不能是nums[i]本身！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            int temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp) &amp;&amp; map.get(temp) != i)&#123;</span><br><span class="line">                <span class="built_in">return</span> new int[] &#123;i,map.get(temp)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析：</p><ul><li>时间复杂度：<br>O(n)， 我们把包含有n个元素的列表遍历两次。由于哈希表将查找时间缩短到O(1)，所以时间复杂度为O(n)。</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表中存储了n个元素。<br>#####方法三：一遍哈希表<br>事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">            int temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                <span class="built_in">return</span> new int[] &#123;map.get(temp),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>复杂度分析：</p><ul><li>时间复杂度：O(n)， 我们只遍历了包含有n个元素的列表一次。在表中进行的每次查找只花费O(1)的时间。</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储n个元素。</li></ul><table><thead><tr><th>采用方法</th><th>分别用时</th></tr></thead><tbody><tr><td>1</td><td>44ms</td></tr><tr><td>2</td><td>11ms</td></tr><tr><td>3</td><td>4ms</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数组下标。&quot;&gt;&lt;a href=&quot;#给定一个整数数组-nums-和一个目标值-target，请你在该数组中找出和为目标值的那-两个-整数，并返回他们的数
      
    
    </summary>
    
      <category term="算法" scheme="http://120224.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://120224.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://120224.com/tags/java/"/>
    
      <category term="力扣" scheme="http://120224.com/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://120224.com/2017/06/22/hello-world/"/>
    <id>http://120224.com/2017/06/22/hello-world/</id>
    <published>2017-06-22T05:14:25.000Z</published>
    <updated>2018-12-28T18:18:27.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="技术" scheme="http://120224.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://120224.com/tags/hexo/"/>
    
  </entry>
  
</feed>
